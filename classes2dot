#! /usr/bin/python
# -*- coding: utf-8 -*-

import fileinput, re

def html_entities(text):
    return (text
            .replace("&", "&amp;")
            .replace("<<", "«")
            .replace(">>", "»")
            .replace("<", "&lt;")
            .replace(">", "&gt;"))

def multiline(indent, lines):
    return ("\n" + indent * "\t").join([html_entities(line) + "<br/>" for line in lines])

STATE_TOPLEVEL = 0
STATE_CLASS_HEAD = 4
STATE_CLASS_PROPERTY_STRING = 5
STATE_COMPARTMENT = 2
STATE_NOTE = 3
STATE_MULTINOTE = 1
STATE_MULTINOTE_TARGETS = 6
STATE_PACKAGE = 7
STATE_NARY_ASSOCIATION = 8
STATE_USECASE = 9
STATE_NODE = 10
STATE_COMPONENT = 11
state = STATE_TOPLEVEL

class Note:
    start_regex = re.compile("^(?P<target>.*?) \\*-- \\[(?P<tail>.*)$")
    end_regex = re.compile("^(?P<note>.*?)\\]$")
    multi_start_regex = re.compile("^\\[(?P<tail>.*)$")
    multi_end_regex = re.compile("^(?P<note>.*?)\\] --\\* \\{(?P<tail>.*)$")
    multi_targets_end_regex = re.compile("\\s*(?P<target>.*?)(?P<end>\\})?$")

    template = ("\t%(id)s [shape = note, label = <%(label)s>]\n"
                "%(targets)s")
    target_template = "\t%(id)s -> %(target)s [style = dashed, arrowhead = dot]"

    count = 0

    def __init__(self, targets):
        self.id = "note%d" % self.__class__.count
        self.targets = targets
        self.lines = []
        self.__class__.count += 1

    def __str__(self):
        return (Note.template
                % {"id": self.id,
                   "label": multiline(2, self.lines),
                   "targets": "\n".join([Note.target_template % {"id": self.id, "target": target}
                                         for target in self.targets])})

    def process_line(self, state, line):
        if state == STATE_NOTE:
            m = re.match(Note.end_regex, line)
            if m:
                self.lines.append(m.group("note"))
                print self
                return STATE_TOPLEVEL
            self.lines.append(line)
            return state
        if state == STATE_MULTINOTE:
            m = re.match(Note.multi_end_regex, line)
            if m:
                self.lines.append(m.group("note"))
                return self.process_line(STATE_MULTINOTE_TARGETS, m.group("tail"))
            if line:
                self.lines.append(line)
            return state
        if state == STATE_MULTINOTE_TARGETS:
            m = re.match(Note.multi_targets_end_regex, line)
            if m.group("target"):
                self.targets.append(m.group("target"))
            if m.group("end"):
                print self
                return STATE_TOPLEVEL
            return state

class Package:
    start_regex = re.compile("^_+\\[(?P<tail>.*?)$")
    end_regex = re.compile("^(?P<label>.*?)\\]_+$")
    name_regex = re.compile("^\\s*(?:(?:«.*?»|<<.*?>>|\\{.*?\\})\\s*)*"
                            "(?P<name>[^\\s<>{}]+).*?"
                            "(?:\\s+@(?P<id>[^@]*?))?"
                            "$", re.DOTALL)

    template = "\t\"%(id)s\" [shape = tab, label = <%(label)s>]"

    def __init__(self):
        self.id = None
        self.lines = []

    def process_line(self, state, line):
        if state == STATE_PACKAGE:
            m = re.match(Package.end_regex, line)
            if m:
                self.lines.append(m.group("label"))
                print self
                return STATE_TOPLEVEL
            self.lines.append(line)
            return state

    def __str__(self):
        m = re.match(Package.name_regex, "\n".join(self.lines))
        return (Package.template
                % {"id": m.group("id") or m.group("name"),
                   "label": multiline(2, self.lines)})

class Class:
    start_regex = re.compile("^\\{$")
    separator_regex = re.compile("^--$")
    end_regex = re.compile("^\\}$")
    id_regex = re.compile("^\\s*(?P<label>.*?)(?:\\s+@(?P<id>[^@]*?))?$")
    name_regex = re.compile("^\\s*(?:(?:«.*?»|<<.*?>>|\\{.*?\\})\\s*)*"
                            "(?P<name>[^\\s:()«»<>{}]+).*?"
                            "(?:\\s+@(?P<id>[^@]*?))?"
                            "$", re.DOTALL)

    count = 0

    class Head:
        template = "\t\t<tr><td>%s</td></tr>"

        def __init__(self, owner):
            self.owner = owner
            self.lines = []

        def process_line(self, line):
            if re.match(Class.separator_regex, line):
                self.owner.compartments.append(Class.Compartment(self.owner))
                return STATE_COMPARTMENT
            if re.match(Class.end_regex, line):
                print self.owner
                return STATE_TOPLEVEL

            m = re.match(Class.id_regex, line)
            self.owner.id = self.owner.id or m.group("id")
            self.lines.append(m.group("label"))
            return STATE_CLASS_HEAD

        def __str__(self):
            return Class.Head.template % multiline(3, self.lines)

        def name(self):
            m = re.match(Class.name_regex, "\n".join(self.lines))
            return m and m.group("name")

    class Compartment:
        empty_template = "\t\t<tr><td></td></tr>"
        template = ("\t\t<tr><td>"
                    "<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"1\">\n"
                    "%s\n"
                    "\t\t</table></td></tr>")

        def __init__(self, owner):
            self.owner = owner
            self.features = []

        def process_line(self, line):
            if re.match(Class.separator_regex, line):
                self.owner.compartments.append(Class.Compartment(self.owner))
                return STATE_COMPARTMENT
            if re.match(Class.end_regex, line):
                print self.owner
                return STATE_TOPLEVEL

            m = re.match(Class.Feature.regex, line)
            if m:
                self.features.append(Class.Feature(m.group("id"),
                                                   m.group("name"),
                                                   m.group("feature")))
                return STATE_COMPARTMENT

            m = re.match(Class.Feature.continuation_regex, line)
            if m:
                if self.features:
                    self.features[-1].append(m.group("id"), m.group("tail"))
                else:
                    self.features.append(Class.Feature(m.group("id"), None,
                                                       m.group("tail"), "center"))
                return STATE_COMPARTMENT

            self.features.append(Class.Feature(None, None, line.strip()))
            return STATE_COMPARTMENT

        def __str__(self):
            if self.features:
                return Class.Compartment.template % "\n".join([str(f) for f in self.features])
            return Class.Compartment.empty_template

    class Feature:
        regex = re.compile("^(?P<feature>"
                           "[-#~+]?"
                           "\\$?"
                           "/?"
                           "(?P<name>[^\\s:()«»<>{}]+)\\s*"
                           ".*?)"
                           "(?:\\s+@(?P<id>[^@]*?))?$")
        continuation_regex = re.compile("^(?P<tail>\\s+.*?)"
                                        "(?:\\s+@(?P<id>.*?))?$")

        port_template = ("\t\t\t<tr><td align=\"%(align)s\" balign=\"%(align)s\" "
                         "port=\"%(id)s\">%(text)s</td></tr>")
        template = "\t\t\t<tr><td align=\"%(align)s\" balign=\"%(align)s\">%(text)s</td></tr>"

        def __init__(self, anId, name, text, align = "left"):
            self.id = anId
            self.name = name
            self.text = [text]
            self.align = align

        def append(self, anId, text):
            self.id = self.id or anId
            self.text.append(text)

        def __str__(self):
            return ((self.id or self.name)
                    and Class.Feature.port_template
                    or Class.Feature.template) % {
                "align": self.align,
                "id": self.id or self.name,
                "text": multiline(4, self.text)}

    template = ("\t\"%(id)s\" [shape = plaintext, height = 0, width = 0, margin = 0, label = <\n"
                "\t\t<table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"1\">\n"
                "%(head)s\n"
                "%(compartments)s\n"
                "\t\t</table>>]")

    def __init__(self):
        self.head = Class.Head(self)
        self.id = None
        self.compartments = []
        self.__class__.count += 1

    def process_line(self, state, line):
        if state == STATE_CLASS_HEAD:
            return self.head.process_line(line)
        if state == STATE_COMPARTMENT:
            return self.compartments[-1].process_line(line)
        return state

    def __str__(self):
        return Class.template % {"id": self.id or self.head.name(),
                                 "head": self.head,
                                 "compartments": "\n".join([str(c) for c in self.compartments])}

class Interface:
    regex = re.compile("^\\(\\)\\s*(?P<label>(?P<name>\\S+).*?)(?:\\s+@(?P<id>[^@]*?))?$")
    template = ("\t\"%(id)s\" [shape = circle, fixedsize = true, height = 0.2, label = \"\"]\n"
                "\t\"%(id)s\" -> \"%(id)s\" [color = transparent, taillabel = <%(label)s>]")

    def __init__(self, anId, label):
        self.id = anId
        self.label = label

    def __str__(self):
        return Interface.template % {"id": self.id, "label": self.label}

class Edge:
    left_arrow_regex = ("((?P<lnormal><#)"       "|(?P<linv>#>)"
                        "|(?P<ldot>\\*|\\(#\\))" "|(?P<linvdot>#>(?:\\*|\\(#\\)))"
                        "|(?P<lodot>o|\\(\\))"   "|(?P<linvodot>#>(?:o|\\(\\)))"
                        "|(?P<lnone>)"           "|(?P<ltee>\\|)"
                        "|(?P<lempty><\\|)"      "|(?P<linvempty>\\|>)"
                        "|(?P<ldiamond><#>)"     "|(?P<lodiamond><>)"
                        "|(?P<lcrow>>)"          "|(?P<lbox>\\[#\\])"
                        "|(?P<lobox>\\[\\])"     "|(?P<lopen><)"
                        "|(?P<lhalfopen>/)"
                        ")")
    right_arrow_regex = ("((?P<rnormal>#>)"       "|(?P<rinv><#)"
                         "|(?P<rdot>\\*|\\(#\\))" "|(?P<rinvdot>(?:\\*|\\(#\\))<#)"
                         "|(?P<rodot>o|\\(\\))"   "|(?P<rinvodot>(?:o|\\(\\))<#)"
                         "|(?P<rnone>)"           "|(?P<rtee>\\|)"
                         "|(?P<rempty>\\|>)"      "|(?P<rinvempty><\\|)"
                         "|(?P<rdiamond><#>)"     "|(?P<rodiamond><>)"
                         "|(?P<rcrow><)"          "|(?P<rbox>\\[#\\])"
                         "|(?P<robox>\\[\\])"     "|(?P<ropen>>)"
                         "|(?P<rhalfopen>/)"
                         ")")

    regex = re.compile("^(?P<lnode>.*?)\\s+"
                       "(?:\\((?P<llabel>.*?)\\)\\s+)?"
                       "(?:\\[(?P<lqualifier>.*?)\\])?"
                       + left_arrow_regex +
                       "((?P<solid>-{2,})"
                       "|(?P<dashed>(?:- )+-)"  "|(?P<dotted>\\.+)"
                       "|(?P<bold>={2,})"       "|(?P<invis>%{2,})"
                       ")"
                       + right_arrow_regex +
                       "(?:\\[(?P<rqualifier>.*?)\\])?"
                       "(?:\\s+\\[(?P<elabel>.*?)\\])?"
                       "(?:\\s+\\((?P<rlabel>.*?)\\))?"
                       "\\s+(?P<rnode>.*?)$")
    multi_start_regex = re.compile("^<>(\\s+@(?P<id>.*?))?\\s+\\{$")
    multi_end_regex = re.compile("^\\}$")

    template = ("\t%(source)s -> %(target)s ["
                "arrowtail = %(arrowtail)s, "
                "style = %(style)s, "
                "arrowhead = %(arrowhead)s, "
                "%(taillabel)s"
                "%(label)s"
                "%(headlabel)s"
                "dir = both]")
    label_template = "%(end)slabel = <%(qualifier)s%(label)s>, "
    qualifier_template = "[[%s]]<br/>"

    arrow_styles = [ "normal", "inv", "dot", "invdot", "odot", "invodot",
                     "none", "tee", "empty", "invempty", "diamond", "odiamond",
                     "crow", "box", "obox", "open", "halfopen" ]

    @staticmethod
    def arrowhead_style(prefix, m):
        for style in Edge.arrow_styles:
            if m.group(prefix + style):
                return style
        return "none"

    edge_styles = [ "solid", "dashed", "dotted", "bold", "invis" ]

    @staticmethod
    def edge_style(m):
        for style in Edge.edge_styles:
            if m.group(style):
                return style
        return "solid"

    def __init__(self, m):
        self.source = m.group("lnode")
        self.target = m.group("rnode")
        self.arrowtail = Edge.arrowhead_style("l", m)
        self.style     = Edge.edge_style(m)
        self.arrowhead = Edge.arrowhead_style("r", m)
        self.taillabel = m.group("llabel")
        self.label     = m.group("elabel")
        self.headlabel = m.group("rlabel")
        self.tailqualifier = m.group("lqualifier")
        self.headqualifier = m.group("rqualifier")

    def __str__(self):
        return (Edge.template %
                {"source":    self.source,
                 "target":    self.target,
                 "arrowtail": self.arrowtail,
                 "style":     self.style,
                 "arrowhead": self.arrowhead,
                 "taillabel": Edge.make_label("tail", self.taillabel, self.tailqualifier),
                 "label":     Edge.make_label("", self.label, None),
                 "headlabel": Edge.make_label("head", self.headlabel, self.headqualifier)})

    @staticmethod
    def make_label(end, label, qualifier):
        return ((label or qualifier)
                and (Edge.label_template
                     % {"end": end,
                        "qualifier": (qualifier
                                      and Edge.qualifier_template % html_entities(qualifier)
                                      or ""),
                        "label": re.sub("\\s+", "<br/>", html_entities(label))})
                or "")

class NaryAssociation:
    start_regex = re.compile("^<>(?:\\s+@(?P<id>.*?))?\\s+\\{$")
    in_branch_regex = re.compile("^\\s*"
                                 "(?P<lnode>.*?)\\s+"
                                 "(?:\\((?P<llabel>.*?)\\)\\s+)?"
                                 "(?:\\[(?P<lqualifier>.*?)\\])?"
                                 + Edge.left_arrow_regex +
                                 "-{2,}\\s+<>$")
    out_branch_regex = re.compile("^\\s*"
                                  "<>\\s+-{2,}"
                                  + Edge.right_arrow_regex +
                                  "(?:\\[(?P<rqualifier>.*?)\\])?"
                                  "(?:\\s+\\((?P<rlabel>.*?)\\))?"
                                  "\\s+(?P<rnode>.*?)$")
    end_regex = re.compile("^\\}$")

    template = ("\t\"%(id)s\" [shape = diamond, fixedsize = true, "
                "height = 0.2, width = 0.4, label = \"\"]\n"
                "%(label)s"
                "%(ends)s")
    label_template = "\t\"%(id)s\" -> \"%(id)s\" [color = transparent, label = <%(label)s>]\n"

    class End:
        def __init__(self, anId, direction, m):
            self.id = "\"%s\"" % anId
            self.direction = direction
            self.node = m.group("%snode" % direction)
            self.label = m.group("%slabel" % direction)
            self.qualifier = m.group("%squalifier" % direction)
            self.arrow = Edge.arrowhead_style(direction, m)

        def __str__(self):
            l = self.direction == "l"
            other_end = l and "tail" or "head"
            this_end  = l and "head" or "tail"
            return Edge.template % {l and "source" or "target": self.node,
                                    l and "target" or "source": self.id,
                                    "arrow%s" % other_end: self.arrow,
                                    "style": "solid",
                                    "arrow%s" % this_end: "none",
                                    "%slabel" % other_end:
                                        Edge.make_label(other_end, self.label, self.qualifier),
                                    "label": "",
                                    "%slabel" % this_end: ""}

    count = 0

    def __init__(self, anId):
        self.id = anId or "nary_association_%d" % self.__class__.count
        self.ends = []
        self.label = []
        self.__class__.count += 1

    def process_line(self, state, line):
        if re.match(NaryAssociation.end_regex, line):
            print self
            return STATE_TOPLEVEL

        m = re.match(NaryAssociation.in_branch_regex, line)
        if m:
            self.ends.append(NaryAssociation.End(self.id, "l", m))
            return state

        m = re.match(NaryAssociation.out_branch_regex, line)
        if m:
            self.ends.append(NaryAssociation.End(self.id, "r", m))
            return state

        label.append(line.strip())
        return state

    def __str__(self):
        return (
            NaryAssociation.template
            % {"id": self.id,
               "label": (
                    self.label
                    and (NaryAssociation.label_template
                         % {"id": self.id,
                            "label": multiline(2, self.label)})
                    or ""),
               "ends": "\n".join([str(end) for end in self.ends])})

# REFACTOR: very similar to Package
class UseCase:
    start_regex = "^\\(_(?P<tail>.*?)$"
    end_regex = "^(?P<label>.*?)_\\)$"
    name_regex = Package.name_regex

    template = "\t\"%(id)s\" [shape = ellipse, label = <%(label)s>]"

    def __init__(self):
        self.label = []

    def process_line(self, state, line):
        if state == STATE_USECASE:
            m = re.match(UseCase.end_regex, line)
            if m:
                self.label.append(m.group("label"))
                print self
                return STATE_TOPLEVEL
            self.label.append(line)
            return state

    def __str__(self):
        m = re.match(UseCase.name_regex, "\n".join(self.label))
        return (UseCase.template
            % {"id": m.group("id") or m.group("name"),
               "label": multiline(2, self.label)})

class Node:
    start_regex = re.compile("^/_+/$")
    end_regex = re.compile("^_+/$")
    name_regex = Package.name_regex

    template = "\t\"%(id)s\" [shape = box3d, label = <%(label)s>]"

    count = 0

    def __init__(self):
        self.label = []
        self.serial = "node%d" % self.__class__.count
        self.__class__.count += 1

    def process_line(self, state, line):
        if state == STATE_NODE:
            if re.match(Node.end_regex, line):
                print self
                return STATE_TOPLEVEL
            self.label.append(line)
            return state

    def __str__(self):
        m = re.match(Node.name_regex, "\n".join(self.label))
        return (Node.template
                % {"id": m.group("id") or m.group("name") or self.serial,
                   "label": multiline(2, self.label)})

class Component:
    start_regex = re.compile("^(?:_+-)+_+$")
    end_regex = re.compile("^_+$")
    name_regex = Package.name_regex

    template = "\t\"%(id)s\" [shape = component, label = <%(label)s>]"

    count = 0

    def __init__(self):
        self.label = []
        self.serial = "node%d" % self.__class__.count
        self.__class__.count += 1

    def process_line(self, state, line):
        if state == STATE_COMPONENT:
            if re.match(Component.end_regex, line):
                print self
                return STATE_TOPLEVEL
            self.label.append(line)
            return state

    def __str__(self):
        m = re.match(Component.name_regex, "\n".join(self.label))
        return (Component.template
                % {"id": m.group("id") or m.group("name") or self.serial,
                   "label": multiline(2, self.label)})


DIGRAPH_BEGIN = """digraph Classes
{
	graph [rankdir = BT, splines = polyline, fontsize = %(fontsize)f, fontname = %(fontname)s, margin = 0.25]
	node [fontsize = %(fontsize)f, fontname = %(fontname)s, penwidth = %(penwidth)f]
	edge [fontsize = %(fontsize)f, fontname = %(fontname)s, penwidth = %(penwidth)f, arrowsize = 0.5]
"""

PASSTHROUGH = "\t%s"

handler = None

fontsize = 8
fontname = "Helvetica"

penwidth = 0.25

print DIGRAPH_BEGIN % locals()

for line in fileinput.input():

    if state == STATE_TOPLEVEL:
        m = re.match(Note.start_regex, line)
        if m:
            handler = Note([m.group("target")])
            state = handler.process_line(STATE_NOTE, m.group("tail"))
            continue

        m = re.match(Note.multi_start_regex, line)
        if m:
            handler = Note([])
            state = handler.process_line(STATE_MULTINOTE, m.group("tail"))
            continue

        m = re.match(Package.start_regex, line)
        if m:
            handler = Package()
            state = handler.process_line(STATE_PACKAGE, m.group("tail"))
            continue

        m = re.match(Class.start_regex, line)
        if m:
            handler = Class()
            state = STATE_CLASS_HEAD
            continue

        m = re.match(Interface.regex, line)
        if m:
            print Interface(m.group("id") or m.group("name"), m.group("label"))
            continue

        m = re.match(Edge.regex, line)
        if m:
            print Edge(m)
            continue

        m = re.match(NaryAssociation.start_regex, line)
        if m:
            handler = NaryAssociation(m.group("id"))
            state = STATE_NARY_ASSOCIATION
            continue

        m = re.match(UseCase.start_regex, line)
        if m:
            handler = UseCase()
            state = handler.process_line(STATE_USECASE, m.group("tail"))
            continue

        m = re.match(Node.start_regex, line)
        if m:
            handler = Node()
            state = STATE_NODE
            continue

        m = re.match(Component.start_regex, line)
        if m:
            handler = Component()
            state = STATE_COMPONENT
            continue

        print line.strip() and PASSTHROUGH % line.strip() or ""

    else:
        state = handler.process_line(state, line)
        continue

print "}"
